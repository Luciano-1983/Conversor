Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DBEQUAL
    DBMINUS
    DBPLUS
    NEQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     statement -> function_def
Rule 4     statement -> if_statement
Rule 5     statement -> for_statement
Rule 6     statement -> while_statement
Rule 7     statement -> print_statement
Rule 8     statement -> assignment_statement
Rule 9     function_def -> DEF ID LPAREN parameters RPAREN COLON block
Rule 10    parameters -> ID
Rule 11    parameters -> parameters COMMA ID
Rule 12    parameters -> <empty>
Rule 13    if_statement -> IF expression COLON block elif_statements else_statement
Rule 14    elif_statements -> ELIF expression COLON block elif_statements
Rule 15    elif_statements -> <empty>
Rule 16    else_statement -> ELSE COLON block
Rule 17    else_statement -> <empty>
Rule 18    for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block
Rule 19    while_statement -> WHILE expression COLON block
Rule 20    print_statement -> PRINT LPAREN print_arguments RPAREN
Rule 21    print_arguments -> expression
Rule 22    print_arguments -> print_arguments COMMA expression
Rule 23    assignment_statement -> ID ASSIGN expression
Rule 24    assignment_statement -> ID PLEQUAL expression
Rule 25    assignment_statement -> ID MIEQUAL expression
Rule 26    assignment_statement -> ID MTEQUAL expression
Rule 27    assignment_statement -> ID DIEQUAL expression
Rule 28    assignment_statement -> ID MOEQUAL expression
Rule 29    expression -> ID
Rule 30    expression -> NUMBER
Rule 31    expression -> STRING
Rule 32    expression -> expression PLUS expression
Rule 33    expression -> expression MINUS expression
Rule 34    expression -> expression MULT expression
Rule 35    expression -> expression DIV expression
Rule 36    expression -> expression MOD expression
Rule 37    expression -> expression EQ expression
Rule 38    expression -> expression NE expression
Rule 39    expression -> expression GT expression
Rule 40    expression -> expression LT expression
Rule 41    block -> statement
Rule 42    block -> block statement

Terminals, with rules where they appear

ASSIGN               : 23
COLON                : 9 13 14 16 18 19
COMMA                : 11 22
DBEQUAL              : 
DBMINUS              : 
DBPLUS               : 
DEF                  : 9
DIEQUAL              : 27
DIV                  : 35
ELIF                 : 14
ELSE                 : 16
EQ                   : 37
FOR                  : 18
GT                   : 39
ID                   : 9 10 11 18 23 24 25 26 27 28 29
IF                   : 13
IN                   : 18
LPAREN               : 9 18 20
LT                   : 40
MIEQUAL              : 25
MINUS                : 33
MOD                  : 36
MOEQUAL              : 28
MTEQUAL              : 26
MULT                 : 34
NE                   : 38
NEQUAL               : 
NUMBER               : 30
PLEQUAL              : 24
PLUS                 : 32
PRINT                : 20
RANGE                : 18
RPAREN               : 9 18 20
STRING               : 31
WHILE                : 19
error                : 

Nonterminals, with rules where they appear

assignment_statement : 8
block                : 9 13 14 16 18 19 42
elif_statements      : 13 14
else_statement       : 13
expression           : 13 14 18 19 21 22 23 24 25 26 27 28 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40
for_statement        : 5
function_def         : 3
if_statement         : 4
parameters           : 9 11
print_arguments      : 20 22
print_statement      : 7
program              : 2 0
statement            : 1 2 41 42
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    program                        shift and go to state 1
    statement                      shift and go to state 2
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    statement                      shift and go to state 15
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 2

    (1) program -> statement .

    DEF             reduce using rule 1 (program -> statement .)
    IF              reduce using rule 1 (program -> statement .)
    FOR             reduce using rule 1 (program -> statement .)
    WHILE           reduce using rule 1 (program -> statement .)
    PRINT           reduce using rule 1 (program -> statement .)
    ID              reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)


state 3

    (3) statement -> function_def .

    DEF             reduce using rule 3 (statement -> function_def .)
    IF              reduce using rule 3 (statement -> function_def .)
    FOR             reduce using rule 3 (statement -> function_def .)
    WHILE           reduce using rule 3 (statement -> function_def .)
    PRINT           reduce using rule 3 (statement -> function_def .)
    ID              reduce using rule 3 (statement -> function_def .)
    $end            reduce using rule 3 (statement -> function_def .)
    ELIF            reduce using rule 3 (statement -> function_def .)
    ELSE            reduce using rule 3 (statement -> function_def .)


state 4

    (4) statement -> if_statement .

    DEF             reduce using rule 4 (statement -> if_statement .)
    IF              reduce using rule 4 (statement -> if_statement .)
    FOR             reduce using rule 4 (statement -> if_statement .)
    WHILE           reduce using rule 4 (statement -> if_statement .)
    PRINT           reduce using rule 4 (statement -> if_statement .)
    ID              reduce using rule 4 (statement -> if_statement .)
    $end            reduce using rule 4 (statement -> if_statement .)
    ELIF            reduce using rule 4 (statement -> if_statement .)
    ELSE            reduce using rule 4 (statement -> if_statement .)


state 5

    (5) statement -> for_statement .

    DEF             reduce using rule 5 (statement -> for_statement .)
    IF              reduce using rule 5 (statement -> for_statement .)
    FOR             reduce using rule 5 (statement -> for_statement .)
    WHILE           reduce using rule 5 (statement -> for_statement .)
    PRINT           reduce using rule 5 (statement -> for_statement .)
    ID              reduce using rule 5 (statement -> for_statement .)
    $end            reduce using rule 5 (statement -> for_statement .)
    ELIF            reduce using rule 5 (statement -> for_statement .)
    ELSE            reduce using rule 5 (statement -> for_statement .)


state 6

    (6) statement -> while_statement .

    DEF             reduce using rule 6 (statement -> while_statement .)
    IF              reduce using rule 6 (statement -> while_statement .)
    FOR             reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    PRINT           reduce using rule 6 (statement -> while_statement .)
    ID              reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    ELIF            reduce using rule 6 (statement -> while_statement .)
    ELSE            reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> print_statement .

    DEF             reduce using rule 7 (statement -> print_statement .)
    IF              reduce using rule 7 (statement -> print_statement .)
    FOR             reduce using rule 7 (statement -> print_statement .)
    WHILE           reduce using rule 7 (statement -> print_statement .)
    PRINT           reduce using rule 7 (statement -> print_statement .)
    ID              reduce using rule 7 (statement -> print_statement .)
    $end            reduce using rule 7 (statement -> print_statement .)
    ELIF            reduce using rule 7 (statement -> print_statement .)
    ELSE            reduce using rule 7 (statement -> print_statement .)


state 8

    (8) statement -> assignment_statement .

    DEF             reduce using rule 8 (statement -> assignment_statement .)
    IF              reduce using rule 8 (statement -> assignment_statement .)
    FOR             reduce using rule 8 (statement -> assignment_statement .)
    WHILE           reduce using rule 8 (statement -> assignment_statement .)
    PRINT           reduce using rule 8 (statement -> assignment_statement .)
    ID              reduce using rule 8 (statement -> assignment_statement .)
    $end            reduce using rule 8 (statement -> assignment_statement .)
    ELIF            reduce using rule 8 (statement -> assignment_statement .)
    ELSE            reduce using rule 8 (statement -> assignment_statement .)


state 9

    (9) function_def -> DEF . ID LPAREN parameters RPAREN COLON block

    ID              shift and go to state 16


state 10

    (23) assignment_statement -> ID . ASSIGN expression
    (24) assignment_statement -> ID . PLEQUAL expression
    (25) assignment_statement -> ID . MIEQUAL expression
    (26) assignment_statement -> ID . MTEQUAL expression
    (27) assignment_statement -> ID . DIEQUAL expression
    (28) assignment_statement -> ID . MOEQUAL expression

    ASSIGN          shift and go to state 17
    PLEQUAL         shift and go to state 18
    MIEQUAL         shift and go to state 19
    MTEQUAL         shift and go to state 20
    DIEQUAL         shift and go to state 21
    MOEQUAL         shift and go to state 22


state 11

    (13) if_statement -> IF . expression COLON block elif_statements else_statement
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 23

state 12

    (18) for_statement -> FOR . ID IN RANGE LPAREN expression RPAREN COLON block

    ID              shift and go to state 27


state 13

    (19) while_statement -> WHILE . expression COLON block
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 28

state 14

    (20) print_statement -> PRINT . LPAREN print_arguments RPAREN

    LPAREN          shift and go to state 29


state 15

    (2) program -> program statement .

    DEF             reduce using rule 2 (program -> program statement .)
    IF              reduce using rule 2 (program -> program statement .)
    FOR             reduce using rule 2 (program -> program statement .)
    WHILE           reduce using rule 2 (program -> program statement .)
    PRINT           reduce using rule 2 (program -> program statement .)
    ID              reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)


state 16

    (9) function_def -> DEF ID . LPAREN parameters RPAREN COLON block

    LPAREN          shift and go to state 30


state 17

    (23) assignment_statement -> ID ASSIGN . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 31

state 18

    (24) assignment_statement -> ID PLEQUAL . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 32

state 19

    (25) assignment_statement -> ID MIEQUAL . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 33

state 20

    (26) assignment_statement -> ID MTEQUAL . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 34

state 21

    (27) assignment_statement -> ID DIEQUAL . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 35

state 22

    (28) assignment_statement -> ID MOEQUAL . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 36

state 23

    (13) if_statement -> IF expression . COLON block elif_statements else_statement
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 24

    (29) expression -> ID .

    COLON           reduce using rule 29 (expression -> ID .)
    PLUS            reduce using rule 29 (expression -> ID .)
    MINUS           reduce using rule 29 (expression -> ID .)
    MULT            reduce using rule 29 (expression -> ID .)
    DIV             reduce using rule 29 (expression -> ID .)
    MOD             reduce using rule 29 (expression -> ID .)
    EQ              reduce using rule 29 (expression -> ID .)
    NE              reduce using rule 29 (expression -> ID .)
    GT              reduce using rule 29 (expression -> ID .)
    LT              reduce using rule 29 (expression -> ID .)
    DEF             reduce using rule 29 (expression -> ID .)
    IF              reduce using rule 29 (expression -> ID .)
    FOR             reduce using rule 29 (expression -> ID .)
    WHILE           reduce using rule 29 (expression -> ID .)
    PRINT           reduce using rule 29 (expression -> ID .)
    ID              reduce using rule 29 (expression -> ID .)
    $end            reduce using rule 29 (expression -> ID .)
    ELIF            reduce using rule 29 (expression -> ID .)
    ELSE            reduce using rule 29 (expression -> ID .)
    RPAREN          reduce using rule 29 (expression -> ID .)
    COMMA           reduce using rule 29 (expression -> ID .)


state 25

    (30) expression -> NUMBER .

    COLON           reduce using rule 30 (expression -> NUMBER .)
    PLUS            reduce using rule 30 (expression -> NUMBER .)
    MINUS           reduce using rule 30 (expression -> NUMBER .)
    MULT            reduce using rule 30 (expression -> NUMBER .)
    DIV             reduce using rule 30 (expression -> NUMBER .)
    MOD             reduce using rule 30 (expression -> NUMBER .)
    EQ              reduce using rule 30 (expression -> NUMBER .)
    NE              reduce using rule 30 (expression -> NUMBER .)
    GT              reduce using rule 30 (expression -> NUMBER .)
    LT              reduce using rule 30 (expression -> NUMBER .)
    DEF             reduce using rule 30 (expression -> NUMBER .)
    IF              reduce using rule 30 (expression -> NUMBER .)
    FOR             reduce using rule 30 (expression -> NUMBER .)
    WHILE           reduce using rule 30 (expression -> NUMBER .)
    PRINT           reduce using rule 30 (expression -> NUMBER .)
    ID              reduce using rule 30 (expression -> NUMBER .)
    $end            reduce using rule 30 (expression -> NUMBER .)
    ELIF            reduce using rule 30 (expression -> NUMBER .)
    ELSE            reduce using rule 30 (expression -> NUMBER .)
    RPAREN          reduce using rule 30 (expression -> NUMBER .)
    COMMA           reduce using rule 30 (expression -> NUMBER .)


state 26

    (31) expression -> STRING .

    COLON           reduce using rule 31 (expression -> STRING .)
    PLUS            reduce using rule 31 (expression -> STRING .)
    MINUS           reduce using rule 31 (expression -> STRING .)
    MULT            reduce using rule 31 (expression -> STRING .)
    DIV             reduce using rule 31 (expression -> STRING .)
    MOD             reduce using rule 31 (expression -> STRING .)
    EQ              reduce using rule 31 (expression -> STRING .)
    NE              reduce using rule 31 (expression -> STRING .)
    GT              reduce using rule 31 (expression -> STRING .)
    LT              reduce using rule 31 (expression -> STRING .)
    DEF             reduce using rule 31 (expression -> STRING .)
    IF              reduce using rule 31 (expression -> STRING .)
    FOR             reduce using rule 31 (expression -> STRING .)
    WHILE           reduce using rule 31 (expression -> STRING .)
    PRINT           reduce using rule 31 (expression -> STRING .)
    ID              reduce using rule 31 (expression -> STRING .)
    $end            reduce using rule 31 (expression -> STRING .)
    ELIF            reduce using rule 31 (expression -> STRING .)
    ELSE            reduce using rule 31 (expression -> STRING .)
    RPAREN          reduce using rule 31 (expression -> STRING .)
    COMMA           reduce using rule 31 (expression -> STRING .)


state 27

    (18) for_statement -> FOR ID . IN RANGE LPAREN expression RPAREN COLON block

    IN              shift and go to state 47


state 28

    (19) while_statement -> WHILE expression . COLON block
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           shift and go to state 48
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 29

    (20) print_statement -> PRINT LPAREN . print_arguments RPAREN
    (21) print_arguments -> . expression
    (22) print_arguments -> . print_arguments COMMA expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    print_arguments                shift and go to state 49
    expression                     shift and go to state 50

state 30

    (9) function_def -> DEF ID LPAREN . parameters RPAREN COLON block
    (10) parameters -> . ID
    (11) parameters -> . parameters COMMA ID
    (12) parameters -> .

    ID              shift and go to state 51
    RPAREN          reduce using rule 12 (parameters -> .)
    COMMA           reduce using rule 12 (parameters -> .)

    parameters                     shift and go to state 52

state 31

    (23) assignment_statement -> ID ASSIGN expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    DEF             reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    IF              reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    FOR             reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    WHILE           reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    PRINT           reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    ID              reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    $end            reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    ELIF            reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 23 (assignment_statement -> ID ASSIGN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 32

    (24) assignment_statement -> ID PLEQUAL expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    DEF             reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    IF              reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    FOR             reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    WHILE           reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    PRINT           reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    ID              reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    $end            reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    ELIF            reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    ELSE            reduce using rule 24 (assignment_statement -> ID PLEQUAL expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 33

    (25) assignment_statement -> ID MIEQUAL expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    DEF             reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    IF              reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    FOR             reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    WHILE           reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    PRINT           reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    ID              reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    $end            reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    ELIF            reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    ELSE            reduce using rule 25 (assignment_statement -> ID MIEQUAL expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 34

    (26) assignment_statement -> ID MTEQUAL expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    DEF             reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    IF              reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    FOR             reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    WHILE           reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    PRINT           reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    ID              reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    $end            reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    ELIF            reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    ELSE            reduce using rule 26 (assignment_statement -> ID MTEQUAL expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 35

    (27) assignment_statement -> ID DIEQUAL expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    DEF             reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    IF              reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    FOR             reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    WHILE           reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    PRINT           reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    ID              reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    $end            reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    ELIF            reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    ELSE            reduce using rule 27 (assignment_statement -> ID DIEQUAL expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 36

    (28) assignment_statement -> ID MOEQUAL expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    DEF             reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    IF              reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    FOR             reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    WHILE           reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    PRINT           reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    ID              reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    $end            reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    ELIF            reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    ELSE            reduce using rule 28 (assignment_statement -> ID MOEQUAL expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 37

    (13) if_statement -> IF expression COLON . block elif_statements else_statement
    (41) block -> . statement
    (42) block -> . block statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    block                          shift and go to state 53
    statement                      shift and go to state 54
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 38

    (32) expression -> expression PLUS . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 55

state 39

    (33) expression -> expression MINUS . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 56

state 40

    (34) expression -> expression MULT . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 57

state 41

    (35) expression -> expression DIV . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 58

state 42

    (36) expression -> expression MOD . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 59

state 43

    (37) expression -> expression EQ . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 60

state 44

    (38) expression -> expression NE . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 61

state 45

    (39) expression -> expression GT . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 62

state 46

    (40) expression -> expression LT . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 63

state 47

    (18) for_statement -> FOR ID IN . RANGE LPAREN expression RPAREN COLON block

    RANGE           shift and go to state 64


state 48

    (19) while_statement -> WHILE expression COLON . block
    (41) block -> . statement
    (42) block -> . block statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    block                          shift and go to state 65
    statement                      shift and go to state 54
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 49

    (20) print_statement -> PRINT LPAREN print_arguments . RPAREN
    (22) print_arguments -> print_arguments . COMMA expression

    RPAREN          shift and go to state 66
    COMMA           shift and go to state 67


state 50

    (21) print_arguments -> expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    RPAREN          reduce using rule 21 (print_arguments -> expression .)
    COMMA           reduce using rule 21 (print_arguments -> expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 51

    (10) parameters -> ID .

    RPAREN          reduce using rule 10 (parameters -> ID .)
    COMMA           reduce using rule 10 (parameters -> ID .)


state 52

    (9) function_def -> DEF ID LPAREN parameters . RPAREN COLON block
    (11) parameters -> parameters . COMMA ID

    RPAREN          shift and go to state 68
    COMMA           shift and go to state 69


state 53

    (13) if_statement -> IF expression COLON block . elif_statements else_statement
    (42) block -> block . statement
    (14) elif_statements -> . ELIF expression COLON block elif_statements
    (15) elif_statements -> .
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    ELIF            shift and go to state 72
    ELSE            reduce using rule 15 (elif_statements -> .)
    $end            reduce using rule 15 (elif_statements -> .)
    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

  ! ELIF            [ reduce using rule 15 (elif_statements -> .) ]
  ! DEF             [ reduce using rule 15 (elif_statements -> .) ]
  ! IF              [ reduce using rule 15 (elif_statements -> .) ]
  ! FOR             [ reduce using rule 15 (elif_statements -> .) ]
  ! WHILE           [ reduce using rule 15 (elif_statements -> .) ]
  ! PRINT           [ reduce using rule 15 (elif_statements -> .) ]
  ! ID              [ reduce using rule 15 (elif_statements -> .) ]

    elif_statements                shift and go to state 70
    statement                      shift and go to state 71
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 54

    (41) block -> statement .

    ELIF            reduce using rule 41 (block -> statement .)
    DEF             reduce using rule 41 (block -> statement .)
    IF              reduce using rule 41 (block -> statement .)
    FOR             reduce using rule 41 (block -> statement .)
    WHILE           reduce using rule 41 (block -> statement .)
    PRINT           reduce using rule 41 (block -> statement .)
    ID              reduce using rule 41 (block -> statement .)
    ELSE            reduce using rule 41 (block -> statement .)
    $end            reduce using rule 41 (block -> statement .)


state 55

    (32) expression -> expression PLUS expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 32 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 32 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 32 (expression -> expression PLUS expression .)
    DEF             reduce using rule 32 (expression -> expression PLUS expression .)
    IF              reduce using rule 32 (expression -> expression PLUS expression .)
    FOR             reduce using rule 32 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 32 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 32 (expression -> expression PLUS expression .)
    ID              reduce using rule 32 (expression -> expression PLUS expression .)
    $end            reduce using rule 32 (expression -> expression PLUS expression .)
    ELIF            reduce using rule 32 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 32 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 32 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 32 (expression -> expression PLUS expression .)
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46

  ! MULT            [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 32 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]


state 56

    (33) expression -> expression MINUS expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 33 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 33 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 33 (expression -> expression MINUS expression .)
    DEF             reduce using rule 33 (expression -> expression MINUS expression .)
    IF              reduce using rule 33 (expression -> expression MINUS expression .)
    FOR             reduce using rule 33 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 33 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 33 (expression -> expression MINUS expression .)
    ID              reduce using rule 33 (expression -> expression MINUS expression .)
    $end            reduce using rule 33 (expression -> expression MINUS expression .)
    ELIF            reduce using rule 33 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 33 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 33 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 33 (expression -> expression MINUS expression .)
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46

  ! MULT            [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 33 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]


state 57

    (34) expression -> expression MULT expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 34 (expression -> expression MULT expression .)
    PLUS            reduce using rule 34 (expression -> expression MULT expression .)
    MINUS           reduce using rule 34 (expression -> expression MULT expression .)
    MULT            reduce using rule 34 (expression -> expression MULT expression .)
    DIV             reduce using rule 34 (expression -> expression MULT expression .)
    MOD             reduce using rule 34 (expression -> expression MULT expression .)
    DEF             reduce using rule 34 (expression -> expression MULT expression .)
    IF              reduce using rule 34 (expression -> expression MULT expression .)
    FOR             reduce using rule 34 (expression -> expression MULT expression .)
    WHILE           reduce using rule 34 (expression -> expression MULT expression .)
    PRINT           reduce using rule 34 (expression -> expression MULT expression .)
    ID              reduce using rule 34 (expression -> expression MULT expression .)
    $end            reduce using rule 34 (expression -> expression MULT expression .)
    ELIF            reduce using rule 34 (expression -> expression MULT expression .)
    ELSE            reduce using rule 34 (expression -> expression MULT expression .)
    RPAREN          reduce using rule 34 (expression -> expression MULT expression .)
    COMMA           reduce using rule 34 (expression -> expression MULT expression .)
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46

  ! EQ              [ reduce using rule 34 (expression -> expression MULT expression .) ]
  ! NE              [ reduce using rule 34 (expression -> expression MULT expression .) ]
  ! GT              [ reduce using rule 34 (expression -> expression MULT expression .) ]
  ! LT              [ reduce using rule 34 (expression -> expression MULT expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! DIV             [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]


state 58

    (35) expression -> expression DIV expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 35 (expression -> expression DIV expression .)
    PLUS            reduce using rule 35 (expression -> expression DIV expression .)
    MINUS           reduce using rule 35 (expression -> expression DIV expression .)
    MULT            reduce using rule 35 (expression -> expression DIV expression .)
    DIV             reduce using rule 35 (expression -> expression DIV expression .)
    MOD             reduce using rule 35 (expression -> expression DIV expression .)
    DEF             reduce using rule 35 (expression -> expression DIV expression .)
    IF              reduce using rule 35 (expression -> expression DIV expression .)
    FOR             reduce using rule 35 (expression -> expression DIV expression .)
    WHILE           reduce using rule 35 (expression -> expression DIV expression .)
    PRINT           reduce using rule 35 (expression -> expression DIV expression .)
    ID              reduce using rule 35 (expression -> expression DIV expression .)
    $end            reduce using rule 35 (expression -> expression DIV expression .)
    ELIF            reduce using rule 35 (expression -> expression DIV expression .)
    ELSE            reduce using rule 35 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 35 (expression -> expression DIV expression .)
    COMMA           reduce using rule 35 (expression -> expression DIV expression .)
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46

  ! EQ              [ reduce using rule 35 (expression -> expression DIV expression .) ]
  ! NE              [ reduce using rule 35 (expression -> expression DIV expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression DIV expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! DIV             [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]


state 59

    (36) expression -> expression MOD expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 36 (expression -> expression MOD expression .)
    PLUS            reduce using rule 36 (expression -> expression MOD expression .)
    MINUS           reduce using rule 36 (expression -> expression MOD expression .)
    MULT            reduce using rule 36 (expression -> expression MOD expression .)
    DIV             reduce using rule 36 (expression -> expression MOD expression .)
    MOD             reduce using rule 36 (expression -> expression MOD expression .)
    DEF             reduce using rule 36 (expression -> expression MOD expression .)
    IF              reduce using rule 36 (expression -> expression MOD expression .)
    FOR             reduce using rule 36 (expression -> expression MOD expression .)
    WHILE           reduce using rule 36 (expression -> expression MOD expression .)
    PRINT           reduce using rule 36 (expression -> expression MOD expression .)
    ID              reduce using rule 36 (expression -> expression MOD expression .)
    $end            reduce using rule 36 (expression -> expression MOD expression .)
    ELIF            reduce using rule 36 (expression -> expression MOD expression .)
    ELSE            reduce using rule 36 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 36 (expression -> expression MOD expression .)
    COMMA           reduce using rule 36 (expression -> expression MOD expression .)
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46

  ! EQ              [ reduce using rule 36 (expression -> expression MOD expression .) ]
  ! NE              [ reduce using rule 36 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 36 (expression -> expression MOD expression .) ]
  ! LT              [ reduce using rule 36 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! DIV             [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]


state 60

    (37) expression -> expression EQ expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 37 (expression -> expression EQ expression .)
    PLUS            reduce using rule 37 (expression -> expression EQ expression .)
    MINUS           reduce using rule 37 (expression -> expression EQ expression .)
    MULT            reduce using rule 37 (expression -> expression EQ expression .)
    DIV             reduce using rule 37 (expression -> expression EQ expression .)
    MOD             reduce using rule 37 (expression -> expression EQ expression .)
    EQ              reduce using rule 37 (expression -> expression EQ expression .)
    NE              reduce using rule 37 (expression -> expression EQ expression .)
    GT              reduce using rule 37 (expression -> expression EQ expression .)
    LT              reduce using rule 37 (expression -> expression EQ expression .)
    DEF             reduce using rule 37 (expression -> expression EQ expression .)
    IF              reduce using rule 37 (expression -> expression EQ expression .)
    FOR             reduce using rule 37 (expression -> expression EQ expression .)
    WHILE           reduce using rule 37 (expression -> expression EQ expression .)
    PRINT           reduce using rule 37 (expression -> expression EQ expression .)
    ID              reduce using rule 37 (expression -> expression EQ expression .)
    $end            reduce using rule 37 (expression -> expression EQ expression .)
    ELIF            reduce using rule 37 (expression -> expression EQ expression .)
    ELSE            reduce using rule 37 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 37 (expression -> expression EQ expression .)
    COMMA           reduce using rule 37 (expression -> expression EQ expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! DIV             [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! EQ              [ shift and go to state 43 ]
  ! NE              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]


state 61

    (38) expression -> expression NE expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 38 (expression -> expression NE expression .)
    PLUS            reduce using rule 38 (expression -> expression NE expression .)
    MINUS           reduce using rule 38 (expression -> expression NE expression .)
    MULT            reduce using rule 38 (expression -> expression NE expression .)
    DIV             reduce using rule 38 (expression -> expression NE expression .)
    MOD             reduce using rule 38 (expression -> expression NE expression .)
    EQ              reduce using rule 38 (expression -> expression NE expression .)
    NE              reduce using rule 38 (expression -> expression NE expression .)
    GT              reduce using rule 38 (expression -> expression NE expression .)
    LT              reduce using rule 38 (expression -> expression NE expression .)
    DEF             reduce using rule 38 (expression -> expression NE expression .)
    IF              reduce using rule 38 (expression -> expression NE expression .)
    FOR             reduce using rule 38 (expression -> expression NE expression .)
    WHILE           reduce using rule 38 (expression -> expression NE expression .)
    PRINT           reduce using rule 38 (expression -> expression NE expression .)
    ID              reduce using rule 38 (expression -> expression NE expression .)
    $end            reduce using rule 38 (expression -> expression NE expression .)
    ELIF            reduce using rule 38 (expression -> expression NE expression .)
    ELSE            reduce using rule 38 (expression -> expression NE expression .)
    RPAREN          reduce using rule 38 (expression -> expression NE expression .)
    COMMA           reduce using rule 38 (expression -> expression NE expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! DIV             [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! EQ              [ shift and go to state 43 ]
  ! NE              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]


state 62

    (39) expression -> expression GT expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 39 (expression -> expression GT expression .)
    PLUS            reduce using rule 39 (expression -> expression GT expression .)
    MINUS           reduce using rule 39 (expression -> expression GT expression .)
    MULT            reduce using rule 39 (expression -> expression GT expression .)
    DIV             reduce using rule 39 (expression -> expression GT expression .)
    MOD             reduce using rule 39 (expression -> expression GT expression .)
    EQ              reduce using rule 39 (expression -> expression GT expression .)
    NE              reduce using rule 39 (expression -> expression GT expression .)
    GT              reduce using rule 39 (expression -> expression GT expression .)
    LT              reduce using rule 39 (expression -> expression GT expression .)
    DEF             reduce using rule 39 (expression -> expression GT expression .)
    IF              reduce using rule 39 (expression -> expression GT expression .)
    FOR             reduce using rule 39 (expression -> expression GT expression .)
    WHILE           reduce using rule 39 (expression -> expression GT expression .)
    PRINT           reduce using rule 39 (expression -> expression GT expression .)
    ID              reduce using rule 39 (expression -> expression GT expression .)
    $end            reduce using rule 39 (expression -> expression GT expression .)
    ELIF            reduce using rule 39 (expression -> expression GT expression .)
    ELSE            reduce using rule 39 (expression -> expression GT expression .)
    RPAREN          reduce using rule 39 (expression -> expression GT expression .)
    COMMA           reduce using rule 39 (expression -> expression GT expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! DIV             [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! EQ              [ shift and go to state 43 ]
  ! NE              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]


state 63

    (40) expression -> expression LT expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           reduce using rule 40 (expression -> expression LT expression .)
    PLUS            reduce using rule 40 (expression -> expression LT expression .)
    MINUS           reduce using rule 40 (expression -> expression LT expression .)
    MULT            reduce using rule 40 (expression -> expression LT expression .)
    DIV             reduce using rule 40 (expression -> expression LT expression .)
    MOD             reduce using rule 40 (expression -> expression LT expression .)
    EQ              reduce using rule 40 (expression -> expression LT expression .)
    NE              reduce using rule 40 (expression -> expression LT expression .)
    GT              reduce using rule 40 (expression -> expression LT expression .)
    LT              reduce using rule 40 (expression -> expression LT expression .)
    DEF             reduce using rule 40 (expression -> expression LT expression .)
    IF              reduce using rule 40 (expression -> expression LT expression .)
    FOR             reduce using rule 40 (expression -> expression LT expression .)
    WHILE           reduce using rule 40 (expression -> expression LT expression .)
    PRINT           reduce using rule 40 (expression -> expression LT expression .)
    ID              reduce using rule 40 (expression -> expression LT expression .)
    $end            reduce using rule 40 (expression -> expression LT expression .)
    ELIF            reduce using rule 40 (expression -> expression LT expression .)
    ELSE            reduce using rule 40 (expression -> expression LT expression .)
    RPAREN          reduce using rule 40 (expression -> expression LT expression .)
    COMMA           reduce using rule 40 (expression -> expression LT expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! MULT            [ shift and go to state 40 ]
  ! DIV             [ shift and go to state 41 ]
  ! MOD             [ shift and go to state 42 ]
  ! EQ              [ shift and go to state 43 ]
  ! NE              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]


state 64

    (18) for_statement -> FOR ID IN RANGE . LPAREN expression RPAREN COLON block

    LPAREN          shift and go to state 73


state 65

    (19) while_statement -> WHILE expression COLON block .
    (42) block -> block . statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    $end            reduce using rule 19 (while_statement -> WHILE expression COLON block .)
    ELIF            reduce using rule 19 (while_statement -> WHILE expression COLON block .)
    ELSE            reduce using rule 19 (while_statement -> WHILE expression COLON block .)
    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

  ! DEF             [ reduce using rule 19 (while_statement -> WHILE expression COLON block .) ]
  ! IF              [ reduce using rule 19 (while_statement -> WHILE expression COLON block .) ]
  ! FOR             [ reduce using rule 19 (while_statement -> WHILE expression COLON block .) ]
  ! WHILE           [ reduce using rule 19 (while_statement -> WHILE expression COLON block .) ]
  ! PRINT           [ reduce using rule 19 (while_statement -> WHILE expression COLON block .) ]
  ! ID              [ reduce using rule 19 (while_statement -> WHILE expression COLON block .) ]

    statement                      shift and go to state 71
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 66

    (20) print_statement -> PRINT LPAREN print_arguments RPAREN .

    DEF             reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    IF              reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    FOR             reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    WHILE           reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    PRINT           reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    ID              reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    $end            reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    ELIF            reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)
    ELSE            reduce using rule 20 (print_statement -> PRINT LPAREN print_arguments RPAREN .)


state 67

    (22) print_arguments -> print_arguments COMMA . expression
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 74

state 68

    (9) function_def -> DEF ID LPAREN parameters RPAREN . COLON block

    COLON           shift and go to state 75


state 69

    (11) parameters -> parameters COMMA . ID

    ID              shift and go to state 76


state 70

    (13) if_statement -> IF expression COLON block elif_statements . else_statement
    (16) else_statement -> . ELSE COLON block
    (17) else_statement -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 78
    ELIF            reduce using rule 17 (else_statement -> .)
    DEF             reduce using rule 17 (else_statement -> .)
    IF              reduce using rule 17 (else_statement -> .)
    FOR             reduce using rule 17 (else_statement -> .)
    WHILE           reduce using rule 17 (else_statement -> .)
    PRINT           reduce using rule 17 (else_statement -> .)
    ID              reduce using rule 17 (else_statement -> .)
    $end            reduce using rule 17 (else_statement -> .)

  ! ELSE            [ reduce using rule 17 (else_statement -> .) ]

    else_statement                 shift and go to state 77

state 71

    (42) block -> block statement .

    ELIF            reduce using rule 42 (block -> block statement .)
    DEF             reduce using rule 42 (block -> block statement .)
    IF              reduce using rule 42 (block -> block statement .)
    FOR             reduce using rule 42 (block -> block statement .)
    WHILE           reduce using rule 42 (block -> block statement .)
    PRINT           reduce using rule 42 (block -> block statement .)
    ID              reduce using rule 42 (block -> block statement .)
    ELSE            reduce using rule 42 (block -> block statement .)
    $end            reduce using rule 42 (block -> block statement .)


state 72

    (14) elif_statements -> ELIF . expression COLON block elif_statements
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 79

state 73

    (18) for_statement -> FOR ID IN RANGE LPAREN . expression RPAREN COLON block
    (29) expression -> . ID
    (30) expression -> . NUMBER
    (31) expression -> . STRING
    (32) expression -> . expression PLUS expression
    (33) expression -> . expression MINUS expression
    (34) expression -> . expression MULT expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MOD expression
    (37) expression -> . expression EQ expression
    (38) expression -> . expression NE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression LT expression

    ID              shift and go to state 24
    NUMBER          shift and go to state 25
    STRING          shift and go to state 26

    expression                     shift and go to state 80

state 74

    (22) print_arguments -> print_arguments COMMA expression .
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    RPAREN          reduce using rule 22 (print_arguments -> print_arguments COMMA expression .)
    COMMA           reduce using rule 22 (print_arguments -> print_arguments COMMA expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 75

    (9) function_def -> DEF ID LPAREN parameters RPAREN COLON . block
    (41) block -> . statement
    (42) block -> . block statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    block                          shift and go to state 81
    statement                      shift and go to state 54
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 76

    (11) parameters -> parameters COMMA ID .

    RPAREN          reduce using rule 11 (parameters -> parameters COMMA ID .)
    COMMA           reduce using rule 11 (parameters -> parameters COMMA ID .)


state 77

    (13) if_statement -> IF expression COLON block elif_statements else_statement .

    DEF             reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    IF              reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    FOR             reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    WHILE           reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    PRINT           reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    ID              reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    $end            reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    ELIF            reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)
    ELSE            reduce using rule 13 (if_statement -> IF expression COLON block elif_statements else_statement .)


state 78

    (16) else_statement -> ELSE . COLON block

    COLON           shift and go to state 82


state 79

    (14) elif_statements -> ELIF expression . COLON block elif_statements
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    COLON           shift and go to state 83
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 80

    (18) for_statement -> FOR ID IN RANGE LPAREN expression . RPAREN COLON block
    (32) expression -> expression . PLUS expression
    (33) expression -> expression . MINUS expression
    (34) expression -> expression . MULT expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MOD expression
    (37) expression -> expression . EQ expression
    (38) expression -> expression . NE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . LT expression

    RPAREN          shift and go to state 84
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    MULT            shift and go to state 40
    DIV             shift and go to state 41
    MOD             shift and go to state 42
    EQ              shift and go to state 43
    NE              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46


state 81

    (9) function_def -> DEF ID LPAREN parameters RPAREN COLON block .
    (42) block -> block . statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    $end            reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .)
    ELIF            reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .)
    ELSE            reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .)
    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

  ! DEF             [ reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .) ]
  ! IF              [ reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .) ]
  ! FOR             [ reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .) ]
  ! WHILE           [ reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .) ]
  ! PRINT           [ reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .) ]
  ! ID              [ reduce using rule 9 (function_def -> DEF ID LPAREN parameters RPAREN COLON block .) ]

    statement                      shift and go to state 71
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 82

    (16) else_statement -> ELSE COLON . block
    (41) block -> . statement
    (42) block -> . block statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    block                          shift and go to state 85
    statement                      shift and go to state 54
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 83

    (14) elif_statements -> ELIF expression COLON . block elif_statements
    (41) block -> . statement
    (42) block -> . block statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    block                          shift and go to state 86
    statement                      shift and go to state 54
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 84

    (18) for_statement -> FOR ID IN RANGE LPAREN expression RPAREN . COLON block

    COLON           shift and go to state 87


state 85

    (16) else_statement -> ELSE COLON block .
    (42) block -> block . statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    ELIF            reduce using rule 16 (else_statement -> ELSE COLON block .)
    ELSE            reduce using rule 16 (else_statement -> ELSE COLON block .)
    $end            reduce using rule 16 (else_statement -> ELSE COLON block .)
    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

  ! DEF             [ reduce using rule 16 (else_statement -> ELSE COLON block .) ]
  ! IF              [ reduce using rule 16 (else_statement -> ELSE COLON block .) ]
  ! FOR             [ reduce using rule 16 (else_statement -> ELSE COLON block .) ]
  ! WHILE           [ reduce using rule 16 (else_statement -> ELSE COLON block .) ]
  ! PRINT           [ reduce using rule 16 (else_statement -> ELSE COLON block .) ]
  ! ID              [ reduce using rule 16 (else_statement -> ELSE COLON block .) ]

    statement                      shift and go to state 71
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 86

    (14) elif_statements -> ELIF expression COLON block . elif_statements
    (42) block -> block . statement
    (14) elif_statements -> . ELIF expression COLON block elif_statements
    (15) elif_statements -> .
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    ELIF            shift and go to state 72
    ELSE            reduce using rule 15 (elif_statements -> .)
    $end            reduce using rule 15 (elif_statements -> .)
    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

  ! ELIF            [ reduce using rule 15 (elif_statements -> .) ]
  ! DEF             [ reduce using rule 15 (elif_statements -> .) ]
  ! IF              [ reduce using rule 15 (elif_statements -> .) ]
  ! FOR             [ reduce using rule 15 (elif_statements -> .) ]
  ! WHILE           [ reduce using rule 15 (elif_statements -> .) ]
  ! PRINT           [ reduce using rule 15 (elif_statements -> .) ]
  ! ID              [ reduce using rule 15 (elif_statements -> .) ]

    elif_statements                shift and go to state 88
    statement                      shift and go to state 71
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 87

    (18) for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON . block
    (41) block -> . statement
    (42) block -> . block statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

    block                          shift and go to state 89
    statement                      shift and go to state 54
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8

state 88

    (14) elif_statements -> ELIF expression COLON block elif_statements .

    ELIF            reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    DEF             reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    IF              reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    FOR             reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    WHILE           reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    PRINT           reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    ID              reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    ELSE            reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)
    $end            reduce using rule 14 (elif_statements -> ELIF expression COLON block elif_statements .)


state 89

    (18) for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .
    (42) block -> block . statement
    (3) statement -> . function_def
    (4) statement -> . if_statement
    (5) statement -> . for_statement
    (6) statement -> . while_statement
    (7) statement -> . print_statement
    (8) statement -> . assignment_statement
    (9) function_def -> . DEF ID LPAREN parameters RPAREN COLON block
    (13) if_statement -> . IF expression COLON block elif_statements else_statement
    (18) for_statement -> . FOR ID IN RANGE LPAREN expression RPAREN COLON block
    (19) while_statement -> . WHILE expression COLON block
    (20) print_statement -> . PRINT LPAREN print_arguments RPAREN
    (23) assignment_statement -> . ID ASSIGN expression
    (24) assignment_statement -> . ID PLEQUAL expression
    (25) assignment_statement -> . ID MIEQUAL expression
    (26) assignment_statement -> . ID MTEQUAL expression
    (27) assignment_statement -> . ID DIEQUAL expression
    (28) assignment_statement -> . ID MOEQUAL expression

  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    $end            reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .)
    ELIF            reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .)
    ELSE            reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .)
    DEF             shift and go to state 9
    IF              shift and go to state 11
    FOR             shift and go to state 12
    WHILE           shift and go to state 13
    PRINT           shift and go to state 14
    ID              shift and go to state 10

  ! DEF             [ reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .) ]
  ! IF              [ reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .) ]
  ! FOR             [ reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .) ]
  ! WHILE           [ reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .) ]
  ! PRINT           [ reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .) ]
  ! ID              [ reduce using rule 18 (for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block .) ]

    statement                      shift and go to state 71
    function_def                   shift and go to state 3
    if_statement                   shift and go to state 4
    for_statement                  shift and go to state 5
    while_statement                shift and go to state 6
    print_statement                shift and go to state 7
    assignment_statement           shift and go to state 8
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELIF in state 53 resolved as shift
WARNING: shift/reduce conflict for DEF in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for FOR in state 53 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 53 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for DEF in state 65 resolved as shift
WARNING: shift/reduce conflict for IF in state 65 resolved as shift
WARNING: shift/reduce conflict for FOR in state 65 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 65 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 65 resolved as shift
WARNING: shift/reduce conflict for ID in state 65 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 70 resolved as shift
WARNING: shift/reduce conflict for DEF in state 81 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 81 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for DEF in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 86 resolved as shift
WARNING: shift/reduce conflict for DEF in state 86 resolved as shift
WARNING: shift/reduce conflict for IF in state 86 resolved as shift
WARNING: shift/reduce conflict for FOR in state 86 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 86 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for DEF in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
