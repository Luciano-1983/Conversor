
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVMODleftEQNEGTLTrightASSIGNPLEQUALMIEQUALMTEQUALDIEQUALMOEQUALASSIGN COLON COMMA DBEQUAL DBMINUS DBPLUS DEF DEF DIEQUAL DIV ELIF ELIF ELSE ELSE EQ FOR FOR GT ID IF IF IN IN LPAREN LT MIEQUAL MINUS MOD MOEQUAL MTEQUAL MULT NE NEQUAL NUMBER PLEQUAL PLUS PRINT PRINT RANGE RANGE RPAREN STRING WHILE WHILEprogram : statement\n               | program statementstatement : function_def\n                 | if_statement\n                 | for_statement\n                 | while_statement\n                 | print_statement\n                 | assignment_statementfunction_def : DEF ID LPAREN parameters RPAREN COLON blockparameters : ID\n                  | parameters COMMA ID\n                  | if_statement : IF expression COLON block elif_statements else_statementelif_statements : ELIF expression COLON block elif_statements\n                       | else_statement : ELSE COLON block\n                      | for_statement : FOR ID IN RANGE LPAREN expression RPAREN COLON blockwhile_statement : WHILE expression COLON blockprint_statement : PRINT LPAREN print_arguments RPARENprint_arguments : expression\n                       | print_arguments COMMA expressionassignment_statement : ID ASSIGN expression\n                            | ID PLEQUAL expression\n                            | ID MIEQUAL expression\n                            | ID MTEQUAL expression\n                            | ID DIEQUAL expression\n                            | ID MOEQUAL expressionexpression : ID\n                  | NUMBER\n                  | STRING\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULT expression\n                  | expression DIV expression\n                  | expression MOD expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression GT expression\n                  | expression LT expressionblock : statement\n             | block statement'
    
_lr_action_items = {'DEF':([0,1,2,3,4,5,6,7,8,15,24,25,26,31,32,33,34,35,36,37,48,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,75,77,81,82,83,85,86,87,88,89,],[9,9,-1,-3,-4,-5,-6,-7,-8,-2,-29,-30,-31,-23,-24,-25,-26,-27,-28,9,9,9,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,9,-20,-17,-42,9,-13,9,9,9,9,9,9,-14,9,]),'IF':([0,1,2,3,4,5,6,7,8,15,24,25,26,31,32,33,34,35,36,37,48,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,75,77,81,82,83,85,86,87,88,89,],[11,11,-1,-3,-4,-5,-6,-7,-8,-2,-29,-30,-31,-23,-24,-25,-26,-27,-28,11,11,11,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,11,-20,-17,-42,11,-13,11,11,11,11,11,11,-14,11,]),'FOR':([0,1,2,3,4,5,6,7,8,15,24,25,26,31,32,33,34,35,36,37,48,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,75,77,81,82,83,85,86,87,88,89,],[12,12,-1,-3,-4,-5,-6,-7,-8,-2,-29,-30,-31,-23,-24,-25,-26,-27,-28,12,12,12,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,12,-20,-17,-42,12,-13,12,12,12,12,12,12,-14,12,]),'WHILE':([0,1,2,3,4,5,6,7,8,15,24,25,26,31,32,33,34,35,36,37,48,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,75,77,81,82,83,85,86,87,88,89,],[13,13,-1,-3,-4,-5,-6,-7,-8,-2,-29,-30,-31,-23,-24,-25,-26,-27,-28,13,13,13,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,13,-20,-17,-42,13,-13,13,13,13,13,13,13,-14,13,]),'PRINT':([0,1,2,3,4,5,6,7,8,15,24,25,26,31,32,33,34,35,36,37,48,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,75,77,81,82,83,85,86,87,88,89,],[14,14,-1,-3,-4,-5,-6,-7,-8,-2,-29,-30,-31,-23,-24,-25,-26,-27,-28,14,14,14,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,14,-20,-17,-42,14,-13,14,14,14,14,14,14,-14,14,]),'ID':([0,1,2,3,4,5,6,7,8,9,11,12,13,15,17,18,19,20,21,22,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,53,54,55,56,57,58,59,60,61,62,63,65,66,67,69,70,71,72,73,75,77,81,82,83,85,86,87,88,89,],[10,10,-1,-3,-4,-5,-6,-7,-8,16,24,27,24,-2,24,24,24,24,24,24,-29,-30,-31,24,51,-23,-24,-25,-26,-27,-28,10,24,24,24,24,24,24,24,24,24,10,10,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,10,-20,24,76,-17,-42,24,24,10,-13,10,10,10,10,10,10,-14,10,]),'$end':([1,2,3,4,5,6,7,8,15,24,25,26,31,32,33,34,35,36,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,77,81,85,86,88,89,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-29,-30,-31,-23,-24,-25,-26,-27,-28,-15,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,-19,-20,-17,-42,-13,-9,-16,-15,-14,-18,]),'ELIF':([3,4,5,6,7,8,24,25,26,31,32,33,34,35,36,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,77,81,85,86,88,89,],[-3,-4,-5,-6,-7,-8,-29,-30,-31,-23,-24,-25,-26,-27,-28,72,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,-19,-20,-17,-42,-13,-9,-16,72,-14,-18,]),'ELSE':([3,4,5,6,7,8,24,25,26,31,32,33,34,35,36,53,54,55,56,57,58,59,60,61,62,63,65,66,70,71,77,81,85,86,88,89,],[-3,-4,-5,-6,-7,-8,-29,-30,-31,-23,-24,-25,-26,-27,-28,-15,-41,-32,-33,-34,-35,-36,-37,-38,-39,-40,-19,-20,78,-42,-13,-9,-16,-15,-14,-18,]),'ASSIGN':([10,],[17,]),'PLEQUAL':([10,],[18,]),'MIEQUAL':([10,],[19,]),'MTEQUAL':([10,],[20,]),'DIEQUAL':([10,],[21,]),'MOEQUAL':([10,],[22,]),'NUMBER':([11,13,17,18,19,20,21,22,29,38,39,40,41,42,43,44,45,46,67,72,73,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'STRING':([11,13,17,18,19,20,21,22,29,38,39,40,41,42,43,44,45,46,67,72,73,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'LPAREN':([14,16,64,],[29,30,73,]),'COLON':([23,24,25,26,28,55,56,57,58,59,60,61,62,63,68,78,79,84,],[37,-29,-30,-31,48,-32,-33,-34,-35,-36,-37,-38,-39,-40,75,82,83,87,]),'PLUS':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[38,-29,-30,-31,38,38,38,38,38,38,38,38,-32,-33,-34,-35,-36,-37,-38,-39,-40,38,38,38,]),'MINUS':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[39,-29,-30,-31,39,39,39,39,39,39,39,39,-32,-33,-34,-35,-36,-37,-38,-39,-40,39,39,39,]),'MULT':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[40,-29,-30,-31,40,40,40,40,40,40,40,40,40,40,-34,-35,-36,-37,-38,-39,-40,40,40,40,]),'DIV':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[41,-29,-30,-31,41,41,41,41,41,41,41,41,41,41,-34,-35,-36,-37,-38,-39,-40,41,41,41,]),'MOD':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[42,-29,-30,-31,42,42,42,42,42,42,42,42,42,42,-34,-35,-36,-37,-38,-39,-40,42,42,42,]),'EQ':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[43,-29,-30,-31,43,43,43,43,43,43,43,43,43,43,43,43,43,-37,-38,-39,-40,43,43,43,]),'NE':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[44,-29,-30,-31,44,44,44,44,44,44,44,44,44,44,44,44,44,-37,-38,-39,-40,44,44,44,]),'GT':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[45,-29,-30,-31,45,45,45,45,45,45,45,45,45,45,45,45,45,-37,-38,-39,-40,45,45,45,]),'LT':([23,24,25,26,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,],[46,-29,-30,-31,46,46,46,46,46,46,46,46,46,46,46,46,46,-37,-38,-39,-40,46,46,46,]),'RPAREN':([24,25,26,30,49,50,51,52,55,56,57,58,59,60,61,62,63,74,76,80,],[-29,-30,-31,-12,66,-21,-10,68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-22,-11,84,]),'COMMA':([24,25,26,30,49,50,51,52,55,56,57,58,59,60,61,62,63,74,76,],[-29,-30,-31,-12,67,-21,-10,69,-32,-33,-34,-35,-36,-37,-38,-39,-40,-22,-11,]),'IN':([27,],[47,]),'RANGE':([47,],[64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,37,48,53,65,75,81,82,83,85,86,87,89,],[2,15,54,54,71,71,54,71,54,54,71,71,54,71,]),'function_def':([0,1,37,48,53,65,75,81,82,83,85,86,87,89,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'if_statement':([0,1,37,48,53,65,75,81,82,83,85,86,87,89,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'for_statement':([0,1,37,48,53,65,75,81,82,83,85,86,87,89,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'while_statement':([0,1,37,48,53,65,75,81,82,83,85,86,87,89,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'print_statement':([0,1,37,48,53,65,75,81,82,83,85,86,87,89,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'assignment_statement':([0,1,37,48,53,65,75,81,82,83,85,86,87,89,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'expression':([11,13,17,18,19,20,21,22,29,38,39,40,41,42,43,44,45,46,67,72,73,],[23,28,31,32,33,34,35,36,50,55,56,57,58,59,60,61,62,63,74,79,80,]),'print_arguments':([29,],[49,]),'parameters':([30,],[52,]),'block':([37,48,75,82,83,87,],[53,65,81,85,86,89,]),'elif_statements':([53,86,],[70,88,]),'else_statement':([70,],[77,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',13),
  ('program -> program statement','program',2,'p_program','parser.py',14),
  ('statement -> function_def','statement',1,'p_statement','parser.py',22),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',23),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',24),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',27),
  ('function_def -> DEF ID LPAREN parameters RPAREN COLON block','function_def',7,'p_function_def','parser.py',32),
  ('parameters -> ID','parameters',1,'p_parameters','parser.py',37),
  ('parameters -> parameters COMMA ID','parameters',3,'p_parameters','parser.py',38),
  ('parameters -> <empty>','parameters',0,'p_parameters','parser.py',39),
  ('if_statement -> IF expression COLON block elif_statements else_statement','if_statement',6,'p_if_statement','parser.py',49),
  ('elif_statements -> ELIF expression COLON block elif_statements','elif_statements',5,'p_elif_statements','parser.py',54),
  ('elif_statements -> <empty>','elif_statements',0,'p_elif_statements','parser.py',55),
  ('else_statement -> ELSE COLON block','else_statement',3,'p_else_statement','parser.py',63),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','parser.py',64),
  ('for_statement -> FOR ID IN RANGE LPAREN expression RPAREN COLON block','for_statement',9,'p_for_statement','parser.py',72),
  ('while_statement -> WHILE expression COLON block','while_statement',4,'p_while_statement','parser.py',77),
  ('print_statement -> PRINT LPAREN print_arguments RPAREN','print_statement',4,'p_print_statement','parser.py',82),
  ('print_arguments -> expression','print_arguments',1,'p_print_arguments','parser.py',87),
  ('print_arguments -> print_arguments COMMA expression','print_arguments',3,'p_print_arguments','parser.py',88),
  ('assignment_statement -> ID ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',96),
  ('assignment_statement -> ID PLEQUAL expression','assignment_statement',3,'p_assignment_statement','parser.py',97),
  ('assignment_statement -> ID MIEQUAL expression','assignment_statement',3,'p_assignment_statement','parser.py',98),
  ('assignment_statement -> ID MTEQUAL expression','assignment_statement',3,'p_assignment_statement','parser.py',99),
  ('assignment_statement -> ID DIEQUAL expression','assignment_statement',3,'p_assignment_statement','parser.py',100),
  ('assignment_statement -> ID MOEQUAL expression','assignment_statement',3,'p_assignment_statement','parser.py',101),
  ('expression -> ID','expression',1,'p_expression','parser.py',109),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',110),
  ('expression -> STRING','expression',1,'p_expression','parser.py',111),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',112),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',113),
  ('expression -> expression MULT expression','expression',3,'p_expression','parser.py',114),
  ('expression -> expression DIV expression','expression',3,'p_expression','parser.py',115),
  ('expression -> expression MOD expression','expression',3,'p_expression','parser.py',116),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',117),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',118),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',119),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',120),
  ('block -> statement','block',1,'p_block','parser.py',128),
  ('block -> block statement','block',2,'p_block','parser.py',129),
]
